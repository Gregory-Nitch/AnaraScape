@using DataAccess
@using DataAccess.Models.LoreModels

@inject ICrud Crud
@inject LocationCache LocCache
@inject NavigationManager NavManager

<PageTitle>Lore: @Model!.Name</PageTitle>

<h1 class="text-light">@Model!.Name</h1>

@if (!string.IsNullOrWhiteSpace(Model.Description))
{
    <h3 class="text-light lore-info">Description:</h3>
    <p class="text-light lore-info">@Model.Description</p>
}

@if (!string.IsNullOrWhiteSpace(Model.MapFilename))
{
    <h3 class="text-light lore-info">Map:</h3>
    <img class="lore-img" src="/static/GeoMaps/@Model.MapFilename" alt="@Model.MapFilename"
        @onclick="() => GoToGeoMap(Model.MapName!)">
}

@if (!string.IsNullOrWhiteSpace(Model.ContainingLocationName))
{
    <h3 class="text-light lore-info">Containing Location:</h3>
    <div class="lore-entry-div">
        <p class="lore-entry" @onclick="() => GoToContainingLore(Model.ContainingLocationId)">
            @Model.ContainingLocationName</p>
    </div>
}

@if (Model.SubLocations.Count != 0)
{
    <h3 class="text-light lore-info">Sub-Locations:</h3>
    @foreach (var loc in Model.SubLocations)
    {
        string locId = $"loc{loc.Id}"; // Added 'loc' here to prevent collision with side bar component ids
        <div class="lore-entry-div">
            <p id="@locId" class="lore-entry" @onclick="() =>
                GoToSubLocation(int.Parse(locId.Remove(_idRemoveStart, _idRemoveEnd)))">@loc.Name</p>
        </div>
    }
}

@if (!string.IsNullOrWhiteSpace(Model.RulingGovernmentName))
{
    <h3 class="text-light lore-info">Ruling Government:</h3>
    <div class="lore-entry-div">
        <p class="lore-entry" @onclick="() => GoToFaction(Model.RulingGovernmentId)">
            @Model.RulingGovernmentName</p>
    </div>
}

@if (!string.IsNullOrWhiteSpace(Model.RulerName))
{
    <h3 class="text-light lore-info">Ruler:</h3>
    <div class="lore-entry-div">
        <p class="lore-entry" @onclick="() => GoToNPC(Model.RulerId)">@Model.RulerName</p>
    </div>
}

@if (Model.NotableArtifacts.Count != 0)
{
    <h3 class="text-light lore-info">Notable Artifacts:</h3>
    @foreach (var art in Model.NotableArtifacts)
    {
        string artId = $"art{art.id}"; // Prevents side bar id collisions
        <div class="lore-entry-div">
            <p id="@artId" class="lore-entry" @onclick="() =>
                GoToArtifact(int.Parse(artId.Remove(_idRemoveStart, _idRemoveEnd)))">@art.name</p>
        </div>
    }
}

@if (Model.NotableEvents.Count != 0)
{
    <h3 class="text-light lore-info">Notable Events:</h3>
    @foreach (var evt in Model.NotableEvents)
    {
        string evtId = $"evt{evt.id}"; // Prevents side bar id collisions
        <div class="lore-entry-div">
            <p id="@evtId" class="lore-entry" @onclick="() =>
                GoToEvent(int.Parse(evtId.Remove(_idRemoveStart, _idRemoveEnd)))">@evt.name</p>
        </div>
    }
}

@if (Model.NotableFactions.Count != 0)
{
    <h3 class="text-light lore-info">Notable Factions:</h3>
    @foreach (var fac in Model.NotableFactions)
    {
        string facId = $"fac{fac.id}"; // Prevents side bar id collisions
        <div class="lore-entry-div">
            <p id="@facId" class="lore-entry" @onclick="() => 
                GoToFaction(int.Parse(facId.Remove(_idRemoveStart, _idRemoveEnd)))">@fac.name</p>
        </div>
    }
}

@if (Model.NotableNPCs.Count != 0)
{
    <h3 class="text-light lore-info">Notable NPCs:</h3>
    @foreach (var npc in Model.NotableNPCs)
    {
        string npcId = $"npc{npc.id}";
        <div class="lore-entry-div">
            <p id="@npcId" class="lore-entry" @onclick="() => 
                GoToNPC(int.Parse(npcId.Remove(_idRemoveStart, _idRemoveEnd)))">@npc.name</p>
        </div>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }
    private FullLocationModel? Model { get; set; } = null;
    private readonly int _idRemoveStart = 0;
    private readonly int _idRemoveEnd = 3;

    protected override void OnParametersSet() // TODO change to on after init + stream rendering?
    {
        Model = Crud.GetFullLocationInfoById(Id);
        if (Model == null)
        {
            // TODO Log and recover
        }
        else
        {
            Model.PopulateRelations(LocCache, Crud);
        }
    }

    private void GoToGeoMap(string name)
    {
        NavManager.NavigateTo($"/world-maps/{name}");
    }

    private void GoToContainingLore(int? id)
    {
        NavManager.NavigateTo($"/lore/locations/{id}");
    }

    private void GoToFaction(int? id)
    {
        NavManager.NavigateTo($"/lore/factions/{id}");
    }

    private void GoToSubLocation(int? id)
    {
        NavManager.NavigateTo($"/lore/locations/{id}");
    }

    private void GoToArtifact(int? id)
    {
        NavManager.NavigateTo($"/lore/artifacts/{id}");
    }

    private void GoToEvent(int? id)
    {
        NavManager.NavigateTo($"/lore/events/{id}");
    }

    private void GoToNPC(int? id)
    {
        NavManager.NavigateTo($"/lore/npcs/{id}");
    }
}

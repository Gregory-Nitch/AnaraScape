@using DataAccess
@using DataAccess.Models.LoreModels

@inject ICrud Crud
@inject LocationCache LocationCache
@inject NavigationManager NavManager

<PageTitle>Lore: @Model!.Name</PageTitle>

<h1 class="text-light">@Model!.Name</h1>

@if (!string.IsNullOrWhiteSpace(Model.Description))
{
    <h3 class="text-light lore-info">Description:</h3>
    <p class="text-light lore-info">@Model.Description</p>
}

@if (!string.IsNullOrWhiteSpace(Model.MapFilename))
{
    <h3 class="text-light lore-info">Map:</h3>
    <img class="lore-map" src="/static/GeoMaps/@Model.MapFilename" alt="@Model.MapFilename"
        @onclick="() => ReqMap(Model.MapName!)">
}

@if (!string.IsNullOrWhiteSpace(Model.ContainingLocationName))
{
    string table = "locations";
    <h3 class="text-light lore-info">Containing Location:</h3>
    <div class="lore-entry-div">
    <p class="lore-entry" @onclick="() => ReqLore(table, (int)Model.ContainingLocationId!)">
        @Model.ContainingLocationName</p>
</div>
}

@if (Model.SubLocations.Count != 0)
{
    <h3 class="text-light lore-info">Sub-Locations:</h3>
    string table = "locations";
    @foreach (var loc in Model.SubLocations)
    {
        int id = loc.Id;
        <div class="lore-entry-div">
    <p class="lore-entry" @onclick="() => ReqLore(table, id)">@loc.Name</p>
</div>
    }
}

@if (!string.IsNullOrWhiteSpace(Model.RulingGovernmentName))
{
    string table = "factions";
    <h3 class="text-light lore-info">Ruling Government:</h3>
    <div class="lore-entry-div">
    <p class="lore-entry" @onclick="() => ReqLore(table, (int)Model.RulingGovernmentId!)">
        @Model.RulingGovernmentName</p>
</div>
}

@if (!string.IsNullOrWhiteSpace(Model.RulerName))
{
    string table = "npcs";
    <h3 class="text-light lore-info">Ruler:</h3>
    <div class="lore-entry-div">
    <p class="lore-entry" @onclick="() => ReqLore(table, (int)Model.RulerId!)">
        @Model.RulerName</p>
</div>
}

@if (Model.NotableArtifacts.Count != 0)
{
    <h3 class="text-light lore-info">Notable Artifacts:</h3>
    string table = "artifacts";
    @foreach (var art in Model.NotableArtifacts)
    {
        int id = art.id;
        <div class="lore-entry-div">
    <p class="lore-entry" @onclick="() => ReqLore(table, id)">@art.name</p>
</div>
    }
}

@if (Model.NotableEvents.Count != 0)
{
    <h3 class="text-light lore-info">Notable Events:</h3>
    string table = "events";
    @foreach (var evt in Model.NotableEvents)
    {
        int id = evt.id;
        <div class="lore-entry-div">
    <p class="lore-entry" @onclick="() => ReqLore(table, id)">@evt.name</p>
</div>
    }
}

@if (Model.NotableFactions.Count != 0)
{
    <h3 class="text-light lore-info">Notable Factions:</h3>
    string table = "factions";
    @foreach (var fac in Model.NotableFactions)
    {
        int id = fac.id;
        <div class="lore-entry-div">
    <p class="lore-entry" @onclick="() => ReqLore(table, id)">@fac.name</p>
</div>
    }
}

@if (Model.NotableNPCs.Count != 0)
{
    <h3 class="text-light lore-info">Notable NPCs:</h3>
    string table = "npcs";
    @foreach (var npc in Model.NotableNPCs)
    {
        int id = npc.id;
        <div class="lore-entry-div">
    <p class="lore-entry" @onclick="() => ReqLore(table, id)">@npc.name</p>
</div>
    }
}

@if (Model.NotableResources.Count != 0)
{
    <h3 class="text-light lore-info">Notable Resources:</h3>
    string table = "resources";
    @foreach (var rsc in Model.NotableResources)
    {
        int id = rsc.id;
        <div class="lore-entry-div">
    <p class="lore-entry" @onclick="() => ReqLore(table, id)">@rsc.name</p>
</div>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public EventCallback<(string table, int id)> OnReqLoreEvent { set; get; }
    [Parameter]
    public EventCallback<string> OnReqMapEvent { set; get; }
    [Parameter]
    public EventCallback<int> OnErrorEvent { get; set; }
    private FullLocationModel? Model { get; set; } = null;

    protected override void OnInitialized()
    {
        Model = Crud.GetFullLocationInfoById(Id);
        if (Model == null)
        {
            OnErrorEvent.InvokeAsync(404);
        }
        else
        {
            Model.SubLocations = [.. LocationCache.Locations.Where(l => l.ContainingLocationId == Id)];
        }
    }

    private Task ReqLore(string table, int id)
    {
        return OnReqLoreEvent.InvokeAsync((table, id));
    }

    private Task ReqMap(string name)
    {
        return OnReqMapEvent.InvokeAsync(name);
    }
}

@using DataAccess
@using DataAccess.Models.LoggingModels
@using DataAccess.Models.LoreModels

@inject LocationTree LocationTree
@inject NavigationManager NavManager
@inject ICrud Crud

@rendermode InteractiveServer

<div id="lore-side-bar" class="@SideBarToggleState">
    @foreach (var node in LocationTree.LocationTreeNodes)
    {
        if (node.Depth == 0)
        {
            <LocationTreeNodeComponent LocationNode="node" VisibilityState="@VisibilityMap[node.LocationId]"
                CaretState="@CaretMap[node.LocationId]" OnHideSubNodesReq="HideSubNodesAndRender"
                OnShowSubNodesReq="ShowSubNodes" @ref="NodeComponent" />
            continue;
        }
        <LocationTreeNodeComponent LocationNode=" node" VisibilityState="@VisibilityMap[node.LocationId]"
            CaretState="@CaretMap[node.LocationId]" OnHideSubNodesReq="HideSubNodesAndRender"
            OnShowSubNodesReq="ShowSubNodes" @ref="NodeComponent" />
    }
</div>

<div id="lore-side-bar-toggler-div" @onclick="ToggleSideBar">
    <button id="lore-side-bar-toggler" type="button" class="btn btn-outline-danger p-0">
        <i class="bi bi-grip-horizontal p-0"></i>
    </button>
</div>


@code {
    private List<LocationTreeNodeComponent> ComponentNodes { get; set; } = [];
    private LocationTreeNodeComponent NodeComponent { set { ComponentNodes.Add(value); } }
    private Dictionary<int, string> VisibilityMap { get; set; } = [];
    private Dictionary<int, string> CaretMap { get; set; } = [];
    private string SideBarToggleState = "";

    /// <summary>
    /// Initializes the lore side bar by checking if the location tree is null. If its not null and
    /// the location tree has not been built then populate the tree with nodes while setting their
    /// visibility and caret states.
    /// </summary>
    protected override void OnInitialized()
    {
        if (LocationTree != null &&
        LocationTree.LocationTreeNodes != null &&
        LocationTree.LocationTreeNodes.Count > 0)
        {
            if (VisibilityMap.Count == 0)
            {
                foreach (var node in LocationTree.LocationTreeNodes)
                {
                    if (node.Depth == 0)
                    {
                        VisibilityMap.Add(node.LocationId, "");
                    }
                    else
                    {
                        VisibilityMap.Add(node.LocationId, "hidden-node");
                    }
                }
            }

            if (CaretMap.Count == 0)
            {
                foreach (var node in LocationTree.LocationTreeNodes)
                {

                    if (node.HasSubLocations)
                    {
                        CaretMap.Add(node.LocationId, "bi bi-caret-right");
                    }
                    else
                    {
                        CaretMap.Add(node.LocationId, "");
                    }
                }
            }
        }
        else
        {// Log event and show error for null or empty location node tree
            Crud.InsertLogEvent(new LogEvent(DateTime.Now, LogLevel.Error, "Location tree object returned Null or count == 0"));
            NavManager.NavigateTo($"/Error/{500}");
        }
    }

    /// <summary>
    /// recursively hides the sub nodes of the passed location tree node component.
    /// </summary>
    private void HideSubNodes(LocationTreeNodeComponent component)
    {
        List<LocationTreeNodeComponent> subNodes = ComponentNodes.Where(
        c => c.LocationNode?.ContainingLocationId == component.LocationNode?.LocationId)
        .ToList();
        CaretMap[(int)component.LocationNode?.LocationId!] = "bi bi-caret-right";

        foreach (var node in subNodes)
        {
            HideSubNodes(node);
            VisibilityMap[node.LocationNode!.LocationId] = "hidden-node";
        }
    }

    /// <summary>
    /// Helper function to start recursive calls from for hiding sub nodes.
    /// </summary>
    private void HideSubNodesAndRender(LocationTreeNodeComponent component)
    {
        HideSubNodes(component);
    }

    /// <summary>
    /// Show sub nodes of the past location tree node component (not recursive). Also changes caret
    /// state.
    /// </summary>
    private void ShowSubNodes(LocationTreeNodeComponent component)
    {
        List<LocationTreeNodeComponent> subNodes = ComponentNodes.Where(
        c => c.LocationNode?.ContainingLocationId == component.LocationNode?.LocationId)
        .ToList();

        CaretMap[(int)component.LocationNode?.LocationId!] = "bi bi-caret-down";

        foreach (var node in subNodes)
        {
            VisibilityMap[node.LocationNode!.LocationId] = "";
        }
    }

    /// <summary>
    /// Toggles the side bar by adding css class styling.
    /// </summary>
    private void ToggleSideBar()
    {
        if (string.IsNullOrWhiteSpace(SideBarToggleState))
        {
            SideBarToggleState = "lore-side-bar-closed";
        }
        else
        {
            SideBarToggleState = "";
        }
    }
}

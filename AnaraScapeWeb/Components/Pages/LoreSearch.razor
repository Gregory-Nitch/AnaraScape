@page "/lore/search/{table}/{searchInput}"

@using AnaraScapeWeb.Components.Layout
@using DataAccess
@using DataAccess.Models.LoreModels

@inject ICrud Crud
@inject NavigationManager NavManager

@rendermode InteractiveServer

<PageTitle>Search Lore</PageTitle>

<LoreSideBar /> @* Keep outside of article for proper positioning. *@

<article>

    <LoreSearchBar TableSelection="@Table" />

    <h2 class="text-light">@Table Search Results</h2>
    <div class="result-div">

        @foreach (var art in Artifacts)
        {
            <p class="lore-result" @onclick="() => GoToLore(art.id)">@art.name</p>
        }

        @foreach (var evt in Events)
        {
            <p class="lore-result" @onclick="() => GoToLore(evt.id)">@evt.name</p>
        }

        @foreach (var map in GeoMaps)
        {
            <p class="lore-result" @onclick="() => GoToMap(map.name)">@map.name</p>
        }

        @foreach (var loc in Locations)
        {
            <p class="lore-result" @onclick="() => GoToLore(loc.id)">@loc.name</p>
        }

        @foreach (var npc in NPCs)
        {
            <p class="lore-result" @onclick="() => GoToLore(npc.id)">@npc.name</p>
        }

        @foreach (var rsc in Resources)
        {
            <p class="lore-result" @onclick="() => GoToLore(rsc.id)">@rsc.name</p>
        }

        @foreach (var trm in Terminologies)
        {
            <p class="lore-result" @onclick="() => GoToLore(trm.id)">@trm.name</p>
        }

    </div>
</article>

@code {
    [Parameter]
    public string Table { get; set; } = "";
    [Parameter]
    public string SearchInput { get; set; } = "";

    private List<(int id, string name)> Artifacts = [];
    private List<(int id, string name)> Events = [];
    private List<(int id, string name)> Factions = [];
    private List<(int id, string name)> GeoMaps = [];
    private List<(int id, string name)> Locations = [];
    private List<(int id, string name)> NPCs = [];
    private List<(int id, string name)> Resources = [];
    private List<(int id, string name)> Terminologies = [];

    protected override void OnParametersSet()
    {
        if (Enum.TryParse(Table, out LoreTable loreTable))
        {
            switch (loreTable)
            {
                case LoreTable.Artifacts:
                    Artifacts = Crud.GetArtifactsLike(SearchInput);
                    break;

                case LoreTable.Events:
                    Events = Crud.GetEventsLike(SearchInput);
                    break;

                case LoreTable.Factions:
                    Factions = Crud.GetFactionsLike(SearchInput);
                    break;

                case LoreTable.GeoMaps:
                    GeoMaps = Crud.GetGeoMapsLike(SearchInput);
                    break;

                case LoreTable.Locations:
                    Locations = Crud.GetLocationsLike(SearchInput);
                    break;

                case LoreTable.NPCs:
                    NPCs = Crud.GetNPCsLike(SearchInput);
                    break;

                case LoreTable.Resources:
                    Resources = Crud.GetResourcesLike(SearchInput);
                    break;

                case LoreTable.Terminologies:
                    Terminologies = Crud.GetTerminologiesLike(SearchInput);
                    break;

                default:
                    // TODO log and recover (Should be unreachable)
                    throw new NotSupportedException();
            }
        }
        // TODO log and recover (Should be unreachable)
    }

    private void GoToLore(int id)
    {
        NavManager.NavigateTo($"/lore/{Table}/{id}");
    }

    private void GoToMap(string name)
    {
        NavManager.NavigateTo($"/world-maps/{name}");
    }
}

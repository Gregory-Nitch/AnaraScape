@page "/world-maps/{reqName?}"
@using AnaraScapeWeb.Components.Layout
@using DataAccess.Models.LoreModels

@inject GeoMapCache GeoMapCache
@inject LocationCache LocationCache
@inject NavigationManager NavManager
@inject IJSRuntime JS

@rendermode InteractiveServer


<PageTitle>World Maps</PageTitle>
<article>
    <h1 class="text-light">@ReqName</h1>

    <canvas id="geomap-canvas" oncontextmenu="return false;"></canvas>

    <div id="router-div">

        <div id="other-maps">
            @if (ContainingMaps.Count > 0)
            {
                <h2 class="text-light">Containing Maps</h2>
                @foreach (var map in ContainingMaps)
                {
                    <button type="button" class="btn btn-dark" @onclick="@(() => GoToContainingMap(map.Name))">
                        <i class="bi bi-zoom-out"></i>@map.Name
                    </button>
                }
            }
            @if (ContainedMaps.Count > 0)
            {
                <h2 class="text-light">Contained Maps</h2>
                @foreach (var map in ContainedMaps)
                {
                    <button type="button" class="btn btn-dark" @onclick="@(() => GoToContainedMap(map.Name))">
                        <i class="bi bi-zoom-in"></i>@map.Name
                    </button>
                }
            }
        </div>

        <div id="location-lore">
            @if (Location != null)
            {
                <button type="button" class="btn btn-dark" @onclick="GoToLore">
                    <i class="bi bi-file-richtext"></i>@Location.Name Lore
                </button>
            }
            @if (ContainedLocations.Count > 0)
            {
                <h2 class="text-light">Contained Locations' Lore</h2>
                @foreach (var entry in ContainedLocations)
                {
                    <button type="button" class="btn btn-dark" @onclick="@(() => GoToContainedLore(entry.Id))">
                        <i class="bi bi-file-earmark-richtext"></i>@entry.Name Lore
                    </button>
                }
            }

        </div>

    </div>
</article>

@code {
    [Parameter]
    public string? ReqName { get; set; }

    private GeoMapModel? GeoMap = null;
    private LocationModel? Location = null;
    private List<GeoMapModel> ContainingMaps = [];
    private List<GeoMapModel> ContainedMaps = [];
    private List<LocationModel> ContainedLocations = [];

    protected override void OnParametersSet()
    {// TODO Handle default nulls.
        ReqName = ReqName ?? "Anara";
        GeoMap = GeoMapCache.GeoMaps.Where(g => g.Name == ReqName).FirstOrDefault();
        if (GeoMap != null)
        {
            Location = LocationCache.Locations.Where(l => l.Id == GeoMap.LocationId).FirstOrDefault();
        }

        ContainingMaps = [.. GeoMapCache.GeoMaps.Where(g => g.LocationId == Location.ContainingLocationId)];

        ContainedLocations = [.. LocationCache.Locations.Where(l => l.ContainingLocationId == Location.Id)];

        ContainedMaps = [.. GeoMapCache.GeoMaps.Where(g => ContainedLocations.Any(l => l.Id == g.LocationId))];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (true)
        {

        }
        if (firstRender)
        {
            await JS.InvokeVoidAsync("WorldMapComponent.requestWorldMap",
            $"/static/GeoMaps/{GeoMap.Filename}");
        }
    }

    private void GoToContainingMap(string mapName)
    {
        NavManager.NavigateTo($"/world-maps/{mapName}");
    }

    private void GoToContainedMap(string mapName)
    {
        NavManager.NavigateTo($"/world-maps/{mapName}");
    }

    private void GoToLore()
    {
        NavManager.NavigateTo($"/lore/locations/{Location.Id}");
    }

    private void GoToContainedLore(int id)
    {
        NavManager.NavigateTo($"/lore/locations/{id}");
    }
}

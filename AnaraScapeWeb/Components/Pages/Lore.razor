@page "/lore/{table?}/{id:int?}"

@using AnaraScapeWeb.Components.Layout
@using DataAccess
@using DataAccess.Models.LoggingModels
@using DataAccess.Models.LoreModels

@rendermode InteractiveServer

@inject NavigationManager NavManager
@inject LocationCache LocationCache
@inject ICrud Crud

@layout Layout.LoreLayout

<PageTitle>Lore</PageTitle>

<article>

    <LoreSearchBar />

    @if (Table != null && Id != null)
    {
        @switch (Table.ToLower())
        {
            case "artifacts":
                <ArtifactLore OnReqLoreEvent="GoToLore" Id="(int)Id" OnErrorEvent="ShowError" />
                break;

            case "events":
                <EventLore OnReqLoreEvent="GoToLore" Id="(int)Id" OnErrorEvent="ShowError" />
                break;

            case "factions":
                <FactionLore OnReqLoreEvent="GoToLore" Id="(int)Id" OnErrorEvent="ShowError" />
                break;

            case "historical-ages":
                <HistoricalAgeLore OnReqLoreEvent="GoToLore" Id="(int)Id" OnErrorEvent="ShowError" />
                break;

            case "npcs":
                <NPCLore OnReqLoreEvent="GoToLore" Id="(int)Id" OnErrorEvent="ShowError" />
                break;

            case "locations":
                <LocationLore OnReqLoreEvent="GoToLore" OnReqMapEvent="GoToMap" Id="(int)Id" OnErrorEvent="ShowError" />
                break;

            case "resources":
                <ResourceLore OnReqLoreEvent="GoToLore" Id="(int)Id" OnErrorEvent="ShowError" />
                break;

            case "terminologies":
                <TerminologyLore OnReqLoreEvent="GoToLore" Id="(int)Id" OnErrorEvent="ShowError" />
                break;

            default:
                ShowError(404);
                break;
        }
    }
    else
    {
        <LocationLore OnReqLoreEvent="GoToLore" OnReqMapEvent="GoToMap" Id="AnaraId" />
    }

</article>

@code {
    [Parameter]
    public string? Table { get; set; }
    [Parameter]
    public int? Id { get; set; }
    private static int AnaraId { get; set; } = 0;


    /// <summary>
    /// Initializes the lore page with Anara as the base location.
    /// </summary>
    protected override void OnInitialized()
    {
        if (AnaraId == 0)
        {
            try
            {
                AnaraId = LocationCache.Locations.Where(l => l.Name.Equals("Anara"))
                .FirstOrDefault()!.Id;
            }
            catch (NullReferenceException ex)
            {
                Crud.InsertLogEvent(new LogEvent(DateTime.Now, LogLevel.Error, ex.Message));
                ShowError(500);
            }
        }
    }

    /// <summary>
    /// Navigates to the lore page with a component based on the passed table and id.
    /// </summary>
    public void GoToLore((string table, int id) req)
    {
        NavManager.NavigateTo($"/lore/{req.table}/{req.id}");
    }

    /// <summary>
    /// Navigates to the map displayed on the lore's page.
    /// </summary>
    public void GoToMap(string mapName)
    {
        NavManager.NavigateTo($"/world-maps/{mapName}");
    }

    /// <summary>
    /// Navigates to the error page (such as bad request 500).
    /// </summary>
    private void ShowError(int errCode)
    {
        NavManager.NavigateTo($"/Error/{errCode}");
    }
}
